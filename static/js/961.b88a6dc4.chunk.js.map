{"version":3,"file":"static/js/961.b88a6dc4.chunk.js","mappings":"8JAQA,UARqB,WACnB,OACE,0BACE,wBAAI,uDAGT,C,4ECJYA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,mICqED,UA9EuB,WAAO,IAAD,IACnBC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0CF,EAAAA,EAAAA,UAAS,MAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4CC,EAAAA,EAAAA,IAAgBZ,GAF5D,OAEUa,EAFV,OAGIT,EAASS,GACTP,EAAiBO,EAA0BC,aAAaC,OAAO,EAAG,CAAC,KAJvE,gDAMIC,QAAQT,MAAR,MACAC,GAAS,GAPb,0DADc,uBAAC,WAAD,wBAWdS,EACD,GAAE,CAACjB,IAEJ,IAAMkB,EAAY,iBAAGT,QAAH,IAAGA,GAAH,UAAGA,EAAUU,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAE9C,OACE,gCACGb,IAAS,SAAC,UAAD,IACTJ,IACC,iCACE,SAAC,KAAD,CAASkB,GAAIH,EAAb,SAA2B,aAC3B,4BACE,gBACEI,IAAG,yCAAoCnB,EAAMoB,eAC7CC,IAAI,eACJ/B,MAAO,WAET,0BACGU,EAAMsB,gBACP,4BAAM,KAAGpB,EAAc,WAEzB,yBAAG,eAAaF,EAAMuB,iBACtB,wBAAI,cACJ,uBAAIvB,EAAMwB,YACV,wBAAI,YACJ,wBACGxB,EAAMyB,OAAOC,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACnB,OAAO,wBAAiBA,GAARD,EACjB,YAMR3B,IACC,4BACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAASkB,GAAG,OAAZ,SAAmB,YAErB,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,SAAsB,qBAK9B,SAAC,EAAAW,SAAD,CACEC,UACE,2BAAK,sBAEH,SAAC,IAAD,OAJN,UAQE,SAAC,KAAD,QAIP,C,+LC3EM,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACcC,EAAAA,EAAAA,IAAA,sBADd,cACCC,EADD,yBAGEA,EAAKC,MAHP,kEANPF,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBG,QAAS,oCASJ,IAAM1B,EAAe,mCAAG,WAAMZ,GAAN,uFACVmC,EAAAA,EAAAA,IAAA,iBAAoBnC,EAApB,qBADU,cACvBoC,EADuB,yBAGtBA,EAAKC,MAHiB,2CAAH,sDAMrB,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,uFACcL,EAAAA,EAAAA,IAAA,6BAAgCK,IAD9C,cACCJ,EADD,yBAGEA,EAAKC,MAHP,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BzC,GAA9B,uFACcmC,EAAAA,EAAAA,IAAA,gBAAmBnC,EAAnB,aADd,cACCoC,EADD,yBAGEA,EAAKC,MAHP,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgC1C,GAAhC,uFACcmC,EAAAA,EAAAA,IAAA,gBAAmBnC,EAAnB,aADd,cACCoC,EADD,yBAGEA,EAAKC,MAHP,kE","sources":["components/ErrorMessages/ErrorMessages.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["const ErrorMessage = () => {\n  return (\n    <div>\n      <h3> Oops....Not found page! Please reload the page !</h3>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import { BallTriangle } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"#4fa94d\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import { Suspense, useEffect, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport ErrorMessage from 'components/ErrorMessages/ErrorMessages';\nimport { fetchMoviesById } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MoviesDetailes = () => {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [releaseMovies, setReleaseMovies] = useState(null);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const respInformationAboutMovie = await fetchMoviesById(moviesId);\n        setMovie(respInformationAboutMovie);\n        setReleaseMovies(respInformationAboutMovie.release_date.substr(0, [4]));\n      } catch (error) {\n        console.error(error);\n        setError(true);\n      }\n    }\n    fetchMovies();\n  }, [moviesId]);\n\n  const backLinkHref = location?.state?.from ?? '/';\n\n  return (\n    <>\n      {error && <ErrorMessage />}\n      {movie && (\n        <>\n          <NavLink to={backLinkHref}>Go back</NavLink>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\n              alt=\"Poster movie\"\n              width={'300px'}\n            />\n            <h2>\n              {movie.original_title}\n              <span> ({releaseMovies})</span>\n            </h2>\n            <p>User Score: {movie.vote_average}</p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n            <ul>\n              {movie.genres.map(({ name }, index) => {\n                return <li key={index}>{name}</li>;\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n\n      {movie && (\n        <div>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <NavLink to=\"cast\">Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\">Reviews</NavLink>\n            </li>\n          </ul>\n        </div>\n      )}\n      <Suspense\n        fallback={\n          <div>\n            Loading subpage...\n            <Loader />\n          </div>\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MoviesDetailes;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// const API_KEY = '64402845586832b1fcc80d4c6361d650';\naxios.defaults.params = {\n  api_key: '64402845586832b1fcc80d4c6361d650',\n};\n\nexport async function fetchTrendingMovies() {\n  const resp = await axios.get(`trending/movie/day`);\n\n  return resp.data;\n}\n\nexport const fetchMoviesById = async moviesId => {\n  const resp = await axios.get(`/movie/${moviesId}?&language=en-US`);\n\n  return resp.data;\n};\n\nexport async function fetchMoviesBySearch(searchQuery) {\n  const resp = await axios.get(`search/movie?query=${searchQuery}`);\n\n  return resp.data;\n}\n\nexport async function fetchCastMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/credits`);\n\n  return resp.data;\n}\nexport async function fetchReviwsMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/reviews`);\n\n  return resp.data;\n}\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","moviesId","useParams","useState","movie","setMovie","releaseMovies","setReleaseMovies","error","setError","location","useLocation","useEffect","fetchMoviesById","respInformationAboutMovie","release_date","substr","console","fetchMovies","backLinkHref","state","from","to","src","backdrop_path","alt","original_title","vote_average","overview","genres","map","index","name","Suspense","fallback","fetchTrendingMovies","axios","resp","data","api_key","fetchMoviesBySearch","searchQuery","fetchCastMovie","fetchReviwsMovie"],"sourceRoot":""}