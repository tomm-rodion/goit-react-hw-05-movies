{"version":3,"file":"static/js/961.76e7e429.chunk.js","mappings":"8JAQA,UARqB,WACnB,OACE,0BACE,wBAAI,uDAGT,C,4ECJYA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,4ICoED,UA5EuB,WAAO,IAAD,IACnBC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4CC,EAAAA,EAAAA,IAAgBV,GAF5D,OAEUW,EAFV,OAGIP,EAASO,GAHb,gDAKIC,QAAQP,MAAR,MACAC,GAAS,GANb,0DADc,uBAAC,WAAD,wBAUdO,EACD,GAAE,CAACb,IAEJ,IAAMc,GAAqBC,EAAAA,EAAAA,QAAM,oBAACR,EAASS,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAE1D,OACE,gCACGZ,IAAS,SAAC,UAAD,IACTF,IACC,iCACE,SAAC,KAAD,CAASe,GAAIJ,EAAmBK,QAAhC,SAAyC,aACzC,4BACE,gBACEC,KAAKC,EAAAA,EAAAA,GAAUlB,EAAMmB,aACrBC,IAAI,eACJ9B,MAAO,WAET,0BACGU,EAAMqB,gBACP,4BAAM,KAAGrB,EAAMsB,aAAaC,OAAO,EAAG,CAAC,IAAI,WAE7C,yBAAG,eAAavB,EAAMwB,iBACtB,wBAAI,cACJ,uBAAIxB,EAAMyB,YACV,wBAAI,YACJ,wBACGzB,EAAM0B,OAAOC,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACnB,OAAO,wBAAiBA,GAARD,EACjB,YAMR5B,IACC,4BACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAASe,GAAG,OAAZ,SAAmB,YAErB,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,SAAsB,qBAK9B,SAAC,EAAAe,SAAD,CACEC,UACE,2BAAK,sBAEH,SAAC,IAAD,OAJN,UAQE,SAAC,KAAD,QAIP,C,+LC1EM,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACcC,EAAAA,EAAAA,IAAA,sBADd,cACCC,EADD,yBAGEA,EAAKC,MAHP,kEANPF,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBG,QAAS,oCASJ,IAAM7B,EAAe,mCAAG,WAAMV,GAAN,uFACVoC,EAAAA,EAAAA,IAAA,iBAAoBpC,EAApB,qBADU,cACvBqC,EADuB,yBAGtBA,EAAKC,MAHiB,2CAAH,sDAMrB,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,uFACcL,EAAAA,EAAAA,IAAA,6BAAgCK,IAD9C,cACCJ,EADD,yBAGEA,EAAKC,MAHP,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8B1C,GAA9B,uFACcoC,EAAAA,EAAAA,IAAA,gBAAmBpC,EAAnB,aADd,cACCqC,EADD,yBAGEA,EAAKC,MAHP,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgC3C,GAAhC,uFACcoC,EAAAA,EAAAA,IAAA,gBAAmBpC,EAAnB,aADd,cACCqC,EADD,yBAGEA,EAAKC,MAHP,kE,oBC3BP,IAHkB,SAAAM,GAChB,OAAOA,EAAG,yCAAqCA,GAF9B,qEAGlB,C","sources":["components/ErrorMessages/ErrorMessages.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js","services/getDefaultImg.js"],"sourcesContent":["const ErrorMessage = () => {\n  return (\n    <div>\n      <h3> Oops....Not found page! Please reload the page !</h3>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import { BallTriangle } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"#4fa94d\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport ErrorMessage from 'components/ErrorMessages/ErrorMessages';\nimport { fetchMoviesById } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport getPoster from 'services/getDefaultImg';\n\nconst MoviesDetailes = () => {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const respInformationAboutMovie = await fetchMoviesById(moviesId);\n        setMovie(respInformationAboutMovie);\n      } catch (error) {\n        console.error(error);\n        setError(true);\n      }\n    }\n    fetchMovies();\n  }, [moviesId]);\n\n  const backLinkLocatinRef = useRef(location.state?.from ?? '/');\n\n  return (\n    <>\n      {error && <ErrorMessage />}\n      {movie && (\n        <>\n          <NavLink to={backLinkLocatinRef.current}>Go back</NavLink>\n          <div>\n            <img\n              src={getPoster(movie.poster_path)}\n              alt=\"Poster movie\"\n              width={'300px'}\n            />\n            <h2>\n              {movie.original_title}\n              <span> ({movie.release_date.substr(0, [4])})</span>\n            </h2>\n            <p>User Score: {movie.vote_average}</p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n            <ul>\n              {movie.genres.map(({ name }, index) => {\n                return <li key={index}>{name}</li>;\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n\n      {movie && (\n        <div>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <NavLink to=\"cast\">Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\">Reviews</NavLink>\n            </li>\n          </ul>\n        </div>\n      )}\n      <Suspense\n        fallback={\n          <div>\n            Loading subpage...\n            <Loader />\n          </div>\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MoviesDetailes;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// const API_KEY = '64402845586832b1fcc80d4c6361d650';\naxios.defaults.params = {\n  api_key: '64402845586832b1fcc80d4c6361d650',\n};\n\nexport async function fetchTrendingMovies() {\n  const resp = await axios.get(`trending/movie/day`);\n\n  return resp.data;\n}\n\nexport const fetchMoviesById = async moviesId => {\n  const resp = await axios.get(`/movie/${moviesId}?&language=en-US`);\n\n  return resp.data;\n};\n\nexport async function fetchMoviesBySearch(searchQuery) {\n  const resp = await axios.get(`search/movie?query=${searchQuery}`);\n\n  return resp.data;\n}\n\nexport async function fetchCastMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/credits`);\n\n  return resp.data;\n}\nexport async function fetchReviwsMovie(moviesId) {\n  const resp = await axios.get(`movie/${moviesId}/reviews`);\n\n  return resp.data;\n}\n","const defaultImgURL = `https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg`;\nconst getPoster = url => {\n  return url ? `https://image.tmdb.org/t/p/w300${url}` : defaultImgURL;\n};\nexport default getPoster;\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","moviesId","useParams","useState","movie","setMovie","error","setError","location","useLocation","useEffect","fetchMoviesById","respInformationAboutMovie","console","fetchMovies","backLinkLocatinRef","useRef","state","from","to","current","src","getPoster","poster_path","alt","original_title","release_date","substr","vote_average","overview","genres","map","index","name","Suspense","fallback","fetchTrendingMovies","axios","resp","data","api_key","fetchMoviesBySearch","searchQuery","fetchCastMovie","fetchReviwsMovie","url"],"sourceRoot":""}